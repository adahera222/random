Terminals unused in grammar

   TOKEN_ERROR


State 34 conflicts: 3 shift/reduce
State 45 conflicts: 3 shift/reduce
State 103 conflicts: 1 reduce/reduce
State 129 conflicts: 1 shift/reduce


Grammar

    0 $accept: PROG $end

    1 PROG: LIST_DEC

    2 LIST_DEC: DEC LIST_DEC
    3         | /* empty */

    4 DEC: DEC_VAR ';'
    5    | DEC_VET ';'
    6    | DEC_FUN

    7 DEC_VAR: TYPE TK_IDENTIFIER ':' LIT
    8        | TYPE '$' TK_IDENTIFIER ':' LIT

    9 DEC_LOC_VAR: TYPE TK_IDENTIFIER ':' LIT
   10            | TYPE '$' TK_IDENTIFIER ':' LIT

   11 TYPE: KW_WORD
   12     | KW_BYTE
   13     | KW_BOOL

   14 LIT: LIT_INTEGER
   15    | LIT_FALSE
   16    | LIT_TRUE
   17    | LIT_CHAR
   18    | LIT_STRING

   19 DEC_VET: TYPE TK_IDENTIFIER '[' LIT_INTEGER ']'
   20        | TYPE TK_IDENTIFIER '[' LIT_INTEGER ']' ':' LIST_VAL

   21 LIST_VAL: LIT LIST_VAL
   22         | /* empty */

   23 DEC_FUN: TYPE TK_IDENTIFIER '(' LIST_DEC_PARAM ')' LIST_DEC_LOC COMMAND

   24 LIST_DEC_LOC: DEC_LOC_VAR ';' LIST_DEC_LOC
   25             | /* empty */

   26 LIST_DEC_PARAM: DEC_PARAM LIST_DEC_PARAM_SEP
   27               | /* empty */

   28 LIST_DEC_PARAM_SEP: ',' LIST_DEC_PARAM
   29                   | /* empty */

   30 DEC_PARAM: TYPE TK_IDENTIFIER

   31 COMMAND: BLOCO
   32        | IF
   33        | LOOP
   34        | TK_IDENTIFIER '=' EXP
   35        | KW_INPUT EXP
   36        | KW_OUTPUT LIST_PARAM
   37        | KW_RETURN EXP
   38        | KW_RETURN
   39        | TK_IDENTIFIER '(' LIST_PARAM ')'
   40        | TK_IDENTIFIER '(' ')'
   41        | /* empty */

   42 BLOCO: '{' LIST_COM '}'

   43 LIST_COM: COMMAND ';' LIST_COM
   44         | COMMAND ';'
   45         | /* empty */

   46 IF: KW_IF '(' EXP ')' KW_THEN COMMAND
   47   | KW_IF '(' EXP ')' KW_THEN COMMAND KW_ELSE COMMAND

   48 LOOP: KW_LOOP '(' EXP ')' COMMAND

   49 EXP: TK_IDENTIFIER
   50    | '&' TK_IDENTIFIER
   51    | '*' TK_IDENTIFIER
   52    | LIT
   53    | EXP '*' EXP
   54    | EXP '/' EXP
   55    | EXP '+' EXP
   56    | EXP '-' EXP
   57    | EXP '<' EXP
   58    | EXP '>' EXP
   59    | EXP OPERATOR_LE EXP
   60    | EXP OPERATOR_GE EXP
   61    | EXP OPERATOR_EQ EXP
   62    | EXP OPERATOR_NE EXP
   63    | EXP OPERATOR_AND EXP
   64    | EXP OPERATOR_OR EXP
   65    | '(' EXP ')'
   66    | FUN

   67 FUN: TK_IDENTIFIER '(' LIST_PARAM ')'
   68    | TK_IDENTIFIER '(' ')'

   69 LIST_PARAM: EXP ',' LIST_PARAM
   70           | EXP


Terminals, with rules where they appear

$end (0) 0
'$' (36) 8 10
'&' (38) 50
'(' (40) 23 39 40 46 47 48 65 67 68
')' (41) 23 39 40 46 47 48 65 67 68
'*' (42) 51 53
'+' (43) 55
',' (44) 28 69
'-' (45) 56
'/' (47) 54
':' (58) 7 8 9 10 20
';' (59) 4 5 24 43 44
'<' (60) 57
'=' (61) 34
'>' (62) 58
'[' (91) 19 20
']' (93) 19 20
'{' (123) 42
'}' (125) 42
KW_WORD (256) 11
KW_BOOL (258) 13
KW_BYTE (259) 12
KW_IF (261) 46 47
KW_THEN (262) 46 47
KW_ELSE (263) 47
KW_LOOP (264) 48
KW_INPUT (266) 35
KW_RETURN (267) 37 38
KW_OUTPUT (268) 36
OPERATOR_LE (270) 59
OPERATOR_GE (271) 60
OPERATOR_EQ (272) 61
OPERATOR_NE (273) 62
OPERATOR_AND (274) 63
OPERATOR_OR (275) 64
TK_IDENTIFIER (280) 7 8 9 10 19 20 23 30 34 39 40 49 50 51 67 68
LIT_INTEGER (281) 14 19 20
LIT_FALSE (283) 15
LIT_TRUE (284) 16
LIT_CHAR (285) 17
LIT_STRING (286) 18
TOKEN_ERROR (290)
error (291)


Nonterminals, with rules where they appear

$accept (44)
    on left: 0
PROG (45)
    on left: 1, on right: 0
LIST_DEC (46)
    on left: 2 3, on right: 1 2
DEC (47)
    on left: 4 5 6, on right: 2
DEC_VAR (48)
    on left: 7 8, on right: 4
DEC_LOC_VAR (49)
    on left: 9 10, on right: 24
TYPE (50)
    on left: 11 12 13, on right: 7 8 9 10 19 20 23 30
LIT (51)
    on left: 14 15 16 17 18, on right: 7 8 9 10 21 52
DEC_VET (52)
    on left: 19 20, on right: 5
LIST_VAL (53)
    on left: 21 22, on right: 20 21
DEC_FUN (54)
    on left: 23, on right: 6
LIST_DEC_LOC (55)
    on left: 24 25, on right: 23 24
LIST_DEC_PARAM (56)
    on left: 26 27, on right: 23 28
LIST_DEC_PARAM_SEP (57)
    on left: 28 29, on right: 26
DEC_PARAM (58)
    on left: 30, on right: 26
COMMAND (59)
    on left: 31 32 33 34 35 36 37 38 39 40 41, on right: 23 43 44 46
    47 48
BLOCO (60)
    on left: 42, on right: 31
LIST_COM (61)
    on left: 43 44 45, on right: 42 43
IF (62)
    on left: 46 47, on right: 32
LOOP (63)
    on left: 48, on right: 33
EXP (64)
    on left: 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66,
    on right: 34 35 37 46 47 48 53 54 55 56 57 58 59 60 61 62 63 64
    65 69 70
FUN (65)
    on left: 67 68, on right: 66
LIST_PARAM (66)
    on left: 69 70, on right: 36 39 67 69


state 0

    0 $accept: . PROG $end

    KW_WORD  shift, and go to state 1
    KW_BOOL  shift, and go to state 2
    KW_BYTE  shift, and go to state 3

    $default  reduce using rule 3 (LIST_DEC)

    PROG      go to state 4
    LIST_DEC  go to state 5
    DEC       go to state 6
    DEC_VAR   go to state 7
    TYPE      go to state 8
    DEC_VET   go to state 9
    DEC_FUN   go to state 10


state 1

   11 TYPE: KW_WORD .

    $default  reduce using rule 11 (TYPE)


state 2

   13 TYPE: KW_BOOL .

    $default  reduce using rule 13 (TYPE)


state 3

   12 TYPE: KW_BYTE .

    $default  reduce using rule 12 (TYPE)


state 4

    0 $accept: PROG . $end

    $end  shift, and go to state 11


state 5

    1 PROG: LIST_DEC .

    $default  reduce using rule 1 (PROG)


state 6

    2 LIST_DEC: DEC . LIST_DEC

    KW_WORD  shift, and go to state 1
    KW_BOOL  shift, and go to state 2
    KW_BYTE  shift, and go to state 3

    $default  reduce using rule 3 (LIST_DEC)

    LIST_DEC  go to state 12
    DEC       go to state 6
    DEC_VAR   go to state 7
    TYPE      go to state 8
    DEC_VET   go to state 9
    DEC_FUN   go to state 10


state 7

    4 DEC: DEC_VAR . ';'

    ';'  shift, and go to state 13


state 8

    7 DEC_VAR: TYPE . TK_IDENTIFIER ':' LIT
    8        | TYPE . '$' TK_IDENTIFIER ':' LIT
   19 DEC_VET: TYPE . TK_IDENTIFIER '[' LIT_INTEGER ']'
   20        | TYPE . TK_IDENTIFIER '[' LIT_INTEGER ']' ':' LIST_VAL
   23 DEC_FUN: TYPE . TK_IDENTIFIER '(' LIST_DEC_PARAM ')' LIST_DEC_LOC COMMAND

    TK_IDENTIFIER  shift, and go to state 14
    '$'            shift, and go to state 15


state 9

    5 DEC: DEC_VET . ';'

    ';'  shift, and go to state 16


state 10

    6 DEC: DEC_FUN .

    $default  reduce using rule 6 (DEC)


state 11

    0 $accept: PROG $end .

    $default  accept


state 12

    2 LIST_DEC: DEC LIST_DEC .

    $default  reduce using rule 2 (LIST_DEC)


state 13

    4 DEC: DEC_VAR ';' .

    $default  reduce using rule 4 (DEC)


state 14

    7 DEC_VAR: TYPE TK_IDENTIFIER . ':' LIT
   19 DEC_VET: TYPE TK_IDENTIFIER . '[' LIT_INTEGER ']'
   20        | TYPE TK_IDENTIFIER . '[' LIT_INTEGER ']' ':' LIST_VAL
   23 DEC_FUN: TYPE TK_IDENTIFIER . '(' LIST_DEC_PARAM ')' LIST_DEC_LOC COMMAND

    ':'  shift, and go to state 17
    '['  shift, and go to state 18
    '('  shift, and go to state 19


state 15

    8 DEC_VAR: TYPE '$' . TK_IDENTIFIER ':' LIT

    TK_IDENTIFIER  shift, and go to state 20


state 16

    5 DEC: DEC_VET ';' .

    $default  reduce using rule 5 (DEC)


state 17

    7 DEC_VAR: TYPE TK_IDENTIFIER ':' . LIT

    LIT_INTEGER  shift, and go to state 21
    LIT_FALSE    shift, and go to state 22
    LIT_TRUE     shift, and go to state 23
    LIT_CHAR     shift, and go to state 24
    LIT_STRING   shift, and go to state 25

    LIT  go to state 26


state 18

   19 DEC_VET: TYPE TK_IDENTIFIER '[' . LIT_INTEGER ']'
   20        | TYPE TK_IDENTIFIER '[' . LIT_INTEGER ']' ':' LIST_VAL

    LIT_INTEGER  shift, and go to state 27


state 19

   23 DEC_FUN: TYPE TK_IDENTIFIER '(' . LIST_DEC_PARAM ')' LIST_DEC_LOC COMMAND

    KW_WORD  shift, and go to state 1
    KW_BOOL  shift, and go to state 2
    KW_BYTE  shift, and go to state 3

    $default  reduce using rule 27 (LIST_DEC_PARAM)

    TYPE            go to state 28
    LIST_DEC_PARAM  go to state 29
    DEC_PARAM       go to state 30


state 20

    8 DEC_VAR: TYPE '$' TK_IDENTIFIER . ':' LIT

    ':'  shift, and go to state 31


state 21

   14 LIT: LIT_INTEGER .

    $default  reduce using rule 14 (LIT)


state 22

   15 LIT: LIT_FALSE .

    $default  reduce using rule 15 (LIT)


state 23

   16 LIT: LIT_TRUE .

    $default  reduce using rule 16 (LIT)


state 24

   17 LIT: LIT_CHAR .

    $default  reduce using rule 17 (LIT)


state 25

   18 LIT: LIT_STRING .

    $default  reduce using rule 18 (LIT)


state 26

    7 DEC_VAR: TYPE TK_IDENTIFIER ':' LIT .

    $default  reduce using rule 7 (DEC_VAR)


state 27

   19 DEC_VET: TYPE TK_IDENTIFIER '[' LIT_INTEGER . ']'
   20        | TYPE TK_IDENTIFIER '[' LIT_INTEGER . ']' ':' LIST_VAL

    ']'  shift, and go to state 32


state 28

   30 DEC_PARAM: TYPE . TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 33


state 29

   23 DEC_FUN: TYPE TK_IDENTIFIER '(' LIST_DEC_PARAM . ')' LIST_DEC_LOC COMMAND

    ')'  shift, and go to state 34


state 30

   26 LIST_DEC_PARAM: DEC_PARAM . LIST_DEC_PARAM_SEP

    ','  shift, and go to state 35

    $default  reduce using rule 29 (LIST_DEC_PARAM_SEP)

    LIST_DEC_PARAM_SEP  go to state 36


state 31

    8 DEC_VAR: TYPE '$' TK_IDENTIFIER ':' . LIT

    LIT_INTEGER  shift, and go to state 21
    LIT_FALSE    shift, and go to state 22
    LIT_TRUE     shift, and go to state 23
    LIT_CHAR     shift, and go to state 24
    LIT_STRING   shift, and go to state 25

    LIT  go to state 37


state 32

   19 DEC_VET: TYPE TK_IDENTIFIER '[' LIT_INTEGER ']' .
   20        | TYPE TK_IDENTIFIER '[' LIT_INTEGER ']' . ':' LIST_VAL

    ':'  shift, and go to state 38

    $default  reduce using rule 19 (DEC_VET)


state 33

   30 DEC_PARAM: TYPE TK_IDENTIFIER .

    $default  reduce using rule 30 (DEC_PARAM)


state 34

   23 DEC_FUN: TYPE TK_IDENTIFIER '(' LIST_DEC_PARAM ')' . LIST_DEC_LOC COMMAND

    KW_WORD  shift, and go to state 1
    KW_BOOL  shift, and go to state 2
    KW_BYTE  shift, and go to state 3

    KW_WORD   [reduce using rule 25 (LIST_DEC_LOC)]
    KW_BOOL   [reduce using rule 25 (LIST_DEC_LOC)]
    KW_BYTE   [reduce using rule 25 (LIST_DEC_LOC)]
    $default  reduce using rule 25 (LIST_DEC_LOC)

    DEC_LOC_VAR   go to state 39
    TYPE          go to state 40
    LIST_DEC_LOC  go to state 41


state 35

   28 LIST_DEC_PARAM_SEP: ',' . LIST_DEC_PARAM

    KW_WORD  shift, and go to state 1
    KW_BOOL  shift, and go to state 2
    KW_BYTE  shift, and go to state 3

    $default  reduce using rule 27 (LIST_DEC_PARAM)

    TYPE            go to state 28
    LIST_DEC_PARAM  go to state 42
    DEC_PARAM       go to state 30


state 36

   26 LIST_DEC_PARAM: DEC_PARAM LIST_DEC_PARAM_SEP .

    $default  reduce using rule 26 (LIST_DEC_PARAM)


state 37

    8 DEC_VAR: TYPE '$' TK_IDENTIFIER ':' LIT .

    $default  reduce using rule 8 (DEC_VAR)


state 38

   20 DEC_VET: TYPE TK_IDENTIFIER '[' LIT_INTEGER ']' ':' . LIST_VAL

    LIT_INTEGER  shift, and go to state 21
    LIT_FALSE    shift, and go to state 22
    LIT_TRUE     shift, and go to state 23
    LIT_CHAR     shift, and go to state 24
    LIT_STRING   shift, and go to state 25

    $default  reduce using rule 22 (LIST_VAL)

    LIT       go to state 43
    LIST_VAL  go to state 44


state 39

   24 LIST_DEC_LOC: DEC_LOC_VAR . ';' LIST_DEC_LOC

    ';'  shift, and go to state 45


state 40

    9 DEC_LOC_VAR: TYPE . TK_IDENTIFIER ':' LIT
   10            | TYPE . '$' TK_IDENTIFIER ':' LIT

    TK_IDENTIFIER  shift, and go to state 46
    '$'            shift, and go to state 47


state 41

   23 DEC_FUN: TYPE TK_IDENTIFIER '(' LIST_DEC_PARAM ')' LIST_DEC_LOC . COMMAND

    KW_IF          shift, and go to state 48
    KW_LOOP        shift, and go to state 49
    KW_INPUT       shift, and go to state 50
    KW_RETURN      shift, and go to state 51
    KW_OUTPUT      shift, and go to state 52
    TK_IDENTIFIER  shift, and go to state 53
    '{'            shift, and go to state 54

    $default  reduce using rule 41 (COMMAND)

    COMMAND  go to state 55
    BLOCO    go to state 56
    IF       go to state 57
    LOOP     go to state 58


state 42

   28 LIST_DEC_PARAM_SEP: ',' LIST_DEC_PARAM .

    $default  reduce using rule 28 (LIST_DEC_PARAM_SEP)


state 43

   21 LIST_VAL: LIT . LIST_VAL

    LIT_INTEGER  shift, and go to state 21
    LIT_FALSE    shift, and go to state 22
    LIT_TRUE     shift, and go to state 23
    LIT_CHAR     shift, and go to state 24
    LIT_STRING   shift, and go to state 25

    $default  reduce using rule 22 (LIST_VAL)

    LIT       go to state 43
    LIST_VAL  go to state 59


state 44

   20 DEC_VET: TYPE TK_IDENTIFIER '[' LIT_INTEGER ']' ':' LIST_VAL .

    $default  reduce using rule 20 (DEC_VET)


state 45

   24 LIST_DEC_LOC: DEC_LOC_VAR ';' . LIST_DEC_LOC

    KW_WORD  shift, and go to state 1
    KW_BOOL  shift, and go to state 2
    KW_BYTE  shift, and go to state 3

    KW_WORD   [reduce using rule 25 (LIST_DEC_LOC)]
    KW_BOOL   [reduce using rule 25 (LIST_DEC_LOC)]
    KW_BYTE   [reduce using rule 25 (LIST_DEC_LOC)]
    $default  reduce using rule 25 (LIST_DEC_LOC)

    DEC_LOC_VAR   go to state 39
    TYPE          go to state 40
    LIST_DEC_LOC  go to state 60


state 46

    9 DEC_LOC_VAR: TYPE TK_IDENTIFIER . ':' LIT

    ':'  shift, and go to state 61


state 47

   10 DEC_LOC_VAR: TYPE '$' . TK_IDENTIFIER ':' LIT

    TK_IDENTIFIER  shift, and go to state 62


state 48

   46 IF: KW_IF . '(' EXP ')' KW_THEN COMMAND
   47   | KW_IF . '(' EXP ')' KW_THEN COMMAND KW_ELSE COMMAND

    '('  shift, and go to state 63


state 49

   48 LOOP: KW_LOOP . '(' EXP ')' COMMAND

    '('  shift, and go to state 64


state 50

   35 COMMAND: KW_INPUT . EXP

    TK_IDENTIFIER  shift, and go to state 65
    LIT_INTEGER    shift, and go to state 21
    LIT_FALSE      shift, and go to state 22
    LIT_TRUE       shift, and go to state 23
    LIT_CHAR       shift, and go to state 24
    LIT_STRING     shift, and go to state 25
    '*'            shift, and go to state 66
    '('            shift, and go to state 67
    '&'            shift, and go to state 68

    LIT  go to state 69
    EXP  go to state 70
    FUN  go to state 71


state 51

   37 COMMAND: KW_RETURN . EXP
   38        | KW_RETURN .

    TK_IDENTIFIER  shift, and go to state 65
    LIT_INTEGER    shift, and go to state 21
    LIT_FALSE      shift, and go to state 22
    LIT_TRUE       shift, and go to state 23
    LIT_CHAR       shift, and go to state 24
    LIT_STRING     shift, and go to state 25
    '*'            shift, and go to state 66
    '('            shift, and go to state 67
    '&'            shift, and go to state 68

    $default  reduce using rule 38 (COMMAND)

    LIT  go to state 69
    EXP  go to state 72
    FUN  go to state 71


state 52

   36 COMMAND: KW_OUTPUT . LIST_PARAM

    TK_IDENTIFIER  shift, and go to state 65
    LIT_INTEGER    shift, and go to state 21
    LIT_FALSE      shift, and go to state 22
    LIT_TRUE       shift, and go to state 23
    LIT_CHAR       shift, and go to state 24
    LIT_STRING     shift, and go to state 25
    '*'            shift, and go to state 66
    '('            shift, and go to state 67
    '&'            shift, and go to state 68

    LIT         go to state 69
    EXP         go to state 73
    FUN         go to state 71
    LIST_PARAM  go to state 74


state 53

   34 COMMAND: TK_IDENTIFIER . '=' EXP
   39        | TK_IDENTIFIER . '(' LIST_PARAM ')'
   40        | TK_IDENTIFIER . '(' ')'

    '('  shift, and go to state 75
    '='  shift, and go to state 76


state 54

   42 BLOCO: '{' . LIST_COM '}'

    KW_IF          shift, and go to state 48
    KW_LOOP        shift, and go to state 49
    KW_INPUT       shift, and go to state 50
    KW_RETURN      shift, and go to state 51
    KW_OUTPUT      shift, and go to state 52
    TK_IDENTIFIER  shift, and go to state 53
    '{'            shift, and go to state 54

    '}'       reduce using rule 45 (LIST_COM)
    $default  reduce using rule 41 (COMMAND)

    COMMAND   go to state 77
    BLOCO     go to state 56
    LIST_COM  go to state 78
    IF        go to state 57
    LOOP      go to state 58


state 55

   23 DEC_FUN: TYPE TK_IDENTIFIER '(' LIST_DEC_PARAM ')' LIST_DEC_LOC COMMAND .

    $default  reduce using rule 23 (DEC_FUN)


state 56

   31 COMMAND: BLOCO .

    $default  reduce using rule 31 (COMMAND)


state 57

   32 COMMAND: IF .

    $default  reduce using rule 32 (COMMAND)


state 58

   33 COMMAND: LOOP .

    $default  reduce using rule 33 (COMMAND)


state 59

   21 LIST_VAL: LIT LIST_VAL .

    $default  reduce using rule 21 (LIST_VAL)


state 60

   24 LIST_DEC_LOC: DEC_LOC_VAR ';' LIST_DEC_LOC .

    $default  reduce using rule 24 (LIST_DEC_LOC)


state 61

    9 DEC_LOC_VAR: TYPE TK_IDENTIFIER ':' . LIT

    LIT_INTEGER  shift, and go to state 21
    LIT_FALSE    shift, and go to state 22
    LIT_TRUE     shift, and go to state 23
    LIT_CHAR     shift, and go to state 24
    LIT_STRING   shift, and go to state 25

    LIT  go to state 79


state 62

   10 DEC_LOC_VAR: TYPE '$' TK_IDENTIFIER . ':' LIT

    ':'  shift, and go to state 80


state 63

   46 IF: KW_IF '(' . EXP ')' KW_THEN COMMAND
   47   | KW_IF '(' . EXP ')' KW_THEN COMMAND KW_ELSE COMMAND

    TK_IDENTIFIER  shift, and go to state 65
    LIT_INTEGER    shift, and go to state 21
    LIT_FALSE      shift, and go to state 22
    LIT_TRUE       shift, and go to state 23
    LIT_CHAR       shift, and go to state 24
    LIT_STRING     shift, and go to state 25
    '*'            shift, and go to state 66
    '('            shift, and go to state 67
    '&'            shift, and go to state 68

    LIT  go to state 69
    EXP  go to state 81
    FUN  go to state 71


state 64

   48 LOOP: KW_LOOP '(' . EXP ')' COMMAND

    TK_IDENTIFIER  shift, and go to state 65
    LIT_INTEGER    shift, and go to state 21
    LIT_FALSE      shift, and go to state 22
    LIT_TRUE       shift, and go to state 23
    LIT_CHAR       shift, and go to state 24
    LIT_STRING     shift, and go to state 25
    '*'            shift, and go to state 66
    '('            shift, and go to state 67
    '&'            shift, and go to state 68

    LIT  go to state 69
    EXP  go to state 82
    FUN  go to state 71


state 65

   49 EXP: TK_IDENTIFIER .
   67 FUN: TK_IDENTIFIER . '(' LIST_PARAM ')'
   68    | TK_IDENTIFIER . '(' ')'

    '('  shift, and go to state 83

    $default  reduce using rule 49 (EXP)


state 66

   51 EXP: '*' . TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 84


state 67

   65 EXP: '(' . EXP ')'

    TK_IDENTIFIER  shift, and go to state 65
    LIT_INTEGER    shift, and go to state 21
    LIT_FALSE      shift, and go to state 22
    LIT_TRUE       shift, and go to state 23
    LIT_CHAR       shift, and go to state 24
    LIT_STRING     shift, and go to state 25
    '*'            shift, and go to state 66
    '('            shift, and go to state 67
    '&'            shift, and go to state 68

    LIT  go to state 69
    EXP  go to state 85
    FUN  go to state 71


state 68

   50 EXP: '&' . TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 86


state 69

   52 EXP: LIT .

    $default  reduce using rule 52 (EXP)


state 70

   35 COMMAND: KW_INPUT EXP .
   53 EXP: EXP . '*' EXP
   54    | EXP . '/' EXP
   55    | EXP . '+' EXP
   56    | EXP . '-' EXP
   57    | EXP . '<' EXP
   58    | EXP . '>' EXP
   59    | EXP . OPERATOR_LE EXP
   60    | EXP . OPERATOR_GE EXP
   61    | EXP . OPERATOR_EQ EXP
   62    | EXP . OPERATOR_NE EXP
   63    | EXP . OPERATOR_AND EXP
   64    | EXP . OPERATOR_OR EXP

    OPERATOR_LE   shift, and go to state 87
    OPERATOR_GE   shift, and go to state 88
    OPERATOR_EQ   shift, and go to state 89
    OPERATOR_NE   shift, and go to state 90
    OPERATOR_AND  shift, and go to state 91
    OPERATOR_OR   shift, and go to state 92
    '<'           shift, and go to state 93
    '>'           shift, and go to state 94
    '+'           shift, and go to state 95
    '-'           shift, and go to state 96
    '*'           shift, and go to state 97
    '/'           shift, and go to state 98

    $default  reduce using rule 35 (COMMAND)


state 71

   66 EXP: FUN .

    $default  reduce using rule 66 (EXP)


state 72

   37 COMMAND: KW_RETURN EXP .
   53 EXP: EXP . '*' EXP
   54    | EXP . '/' EXP
   55    | EXP . '+' EXP
   56    | EXP . '-' EXP
   57    | EXP . '<' EXP
   58    | EXP . '>' EXP
   59    | EXP . OPERATOR_LE EXP
   60    | EXP . OPERATOR_GE EXP
   61    | EXP . OPERATOR_EQ EXP
   62    | EXP . OPERATOR_NE EXP
   63    | EXP . OPERATOR_AND EXP
   64    | EXP . OPERATOR_OR EXP

    OPERATOR_LE   shift, and go to state 87
    OPERATOR_GE   shift, and go to state 88
    OPERATOR_EQ   shift, and go to state 89
    OPERATOR_NE   shift, and go to state 90
    OPERATOR_AND  shift, and go to state 91
    OPERATOR_OR   shift, and go to state 92
    '<'           shift, and go to state 93
    '>'           shift, and go to state 94
    '+'           shift, and go to state 95
    '-'           shift, and go to state 96
    '*'           shift, and go to state 97
    '/'           shift, and go to state 98

    $default  reduce using rule 37 (COMMAND)


state 73

   53 EXP: EXP . '*' EXP
   54    | EXP . '/' EXP
   55    | EXP . '+' EXP
   56    | EXP . '-' EXP
   57    | EXP . '<' EXP
   58    | EXP . '>' EXP
   59    | EXP . OPERATOR_LE EXP
   60    | EXP . OPERATOR_GE EXP
   61    | EXP . OPERATOR_EQ EXP
   62    | EXP . OPERATOR_NE EXP
   63    | EXP . OPERATOR_AND EXP
   64    | EXP . OPERATOR_OR EXP
   69 LIST_PARAM: EXP . ',' LIST_PARAM
   70           | EXP .

    OPERATOR_LE   shift, and go to state 87
    OPERATOR_GE   shift, and go to state 88
    OPERATOR_EQ   shift, and go to state 89
    OPERATOR_NE   shift, and go to state 90
    OPERATOR_AND  shift, and go to state 91
    OPERATOR_OR   shift, and go to state 92
    '<'           shift, and go to state 93
    '>'           shift, and go to state 94
    '+'           shift, and go to state 95
    '-'           shift, and go to state 96
    '*'           shift, and go to state 97
    '/'           shift, and go to state 98
    ','           shift, and go to state 99

    $default  reduce using rule 70 (LIST_PARAM)


state 74

   36 COMMAND: KW_OUTPUT LIST_PARAM .

    $default  reduce using rule 36 (COMMAND)


state 75

   39 COMMAND: TK_IDENTIFIER '(' . LIST_PARAM ')'
   40        | TK_IDENTIFIER '(' . ')'

    TK_IDENTIFIER  shift, and go to state 65
    LIT_INTEGER    shift, and go to state 21
    LIT_FALSE      shift, and go to state 22
    LIT_TRUE       shift, and go to state 23
    LIT_CHAR       shift, and go to state 24
    LIT_STRING     shift, and go to state 25
    '*'            shift, and go to state 66
    '('            shift, and go to state 67
    ')'            shift, and go to state 100
    '&'            shift, and go to state 68

    LIT         go to state 69
    EXP         go to state 73
    FUN         go to state 71
    LIST_PARAM  go to state 101


state 76

   34 COMMAND: TK_IDENTIFIER '=' . EXP

    TK_IDENTIFIER  shift, and go to state 65
    LIT_INTEGER    shift, and go to state 21
    LIT_FALSE      shift, and go to state 22
    LIT_TRUE       shift, and go to state 23
    LIT_CHAR       shift, and go to state 24
    LIT_STRING     shift, and go to state 25
    '*'            shift, and go to state 66
    '('            shift, and go to state 67
    '&'            shift, and go to state 68

    LIT  go to state 69
    EXP  go to state 102
    FUN  go to state 71


state 77

   43 LIST_COM: COMMAND . ';' LIST_COM
   44         | COMMAND . ';'

    ';'  shift, and go to state 103


state 78

   42 BLOCO: '{' LIST_COM . '}'

    '}'  shift, and go to state 104


state 79

    9 DEC_LOC_VAR: TYPE TK_IDENTIFIER ':' LIT .

    $default  reduce using rule 9 (DEC_LOC_VAR)


state 80

   10 DEC_LOC_VAR: TYPE '$' TK_IDENTIFIER ':' . LIT

    LIT_INTEGER  shift, and go to state 21
    LIT_FALSE    shift, and go to state 22
    LIT_TRUE     shift, and go to state 23
    LIT_CHAR     shift, and go to state 24
    LIT_STRING   shift, and go to state 25

    LIT  go to state 105


state 81

   46 IF: KW_IF '(' EXP . ')' KW_THEN COMMAND
   47   | KW_IF '(' EXP . ')' KW_THEN COMMAND KW_ELSE COMMAND
   53 EXP: EXP . '*' EXP
   54    | EXP . '/' EXP
   55    | EXP . '+' EXP
   56    | EXP . '-' EXP
   57    | EXP . '<' EXP
   58    | EXP . '>' EXP
   59    | EXP . OPERATOR_LE EXP
   60    | EXP . OPERATOR_GE EXP
   61    | EXP . OPERATOR_EQ EXP
   62    | EXP . OPERATOR_NE EXP
   63    | EXP . OPERATOR_AND EXP
   64    | EXP . OPERATOR_OR EXP

    OPERATOR_LE   shift, and go to state 87
    OPERATOR_GE   shift, and go to state 88
    OPERATOR_EQ   shift, and go to state 89
    OPERATOR_NE   shift, and go to state 90
    OPERATOR_AND  shift, and go to state 91
    OPERATOR_OR   shift, and go to state 92
    '<'           shift, and go to state 93
    '>'           shift, and go to state 94
    '+'           shift, and go to state 95
    '-'           shift, and go to state 96
    '*'           shift, and go to state 97
    '/'           shift, and go to state 98
    ')'           shift, and go to state 106


state 82

   48 LOOP: KW_LOOP '(' EXP . ')' COMMAND
   53 EXP: EXP . '*' EXP
   54    | EXP . '/' EXP
   55    | EXP . '+' EXP
   56    | EXP . '-' EXP
   57    | EXP . '<' EXP
   58    | EXP . '>' EXP
   59    | EXP . OPERATOR_LE EXP
   60    | EXP . OPERATOR_GE EXP
   61    | EXP . OPERATOR_EQ EXP
   62    | EXP . OPERATOR_NE EXP
   63    | EXP . OPERATOR_AND EXP
   64    | EXP . OPERATOR_OR EXP

    OPERATOR_LE   shift, and go to state 87
    OPERATOR_GE   shift, and go to state 88
    OPERATOR_EQ   shift, and go to state 89
    OPERATOR_NE   shift, and go to state 90
    OPERATOR_AND  shift, and go to state 91
    OPERATOR_OR   shift, and go to state 92
    '<'           shift, and go to state 93
    '>'           shift, and go to state 94
    '+'           shift, and go to state 95
    '-'           shift, and go to state 96
    '*'           shift, and go to state 97
    '/'           shift, and go to state 98
    ')'           shift, and go to state 107


state 83

   67 FUN: TK_IDENTIFIER '(' . LIST_PARAM ')'
   68    | TK_IDENTIFIER '(' . ')'

    TK_IDENTIFIER  shift, and go to state 65
    LIT_INTEGER    shift, and go to state 21
    LIT_FALSE      shift, and go to state 22
    LIT_TRUE       shift, and go to state 23
    LIT_CHAR       shift, and go to state 24
    LIT_STRING     shift, and go to state 25
    '*'            shift, and go to state 66
    '('            shift, and go to state 67
    ')'            shift, and go to state 108
    '&'            shift, and go to state 68

    LIT         go to state 69
    EXP         go to state 73
    FUN         go to state 71
    LIST_PARAM  go to state 109


state 84

   51 EXP: '*' TK_IDENTIFIER .

    $default  reduce using rule 51 (EXP)


state 85

   53 EXP: EXP . '*' EXP
   54    | EXP . '/' EXP
   55    | EXP . '+' EXP
   56    | EXP . '-' EXP
   57    | EXP . '<' EXP
   58    | EXP . '>' EXP
   59    | EXP . OPERATOR_LE EXP
   60    | EXP . OPERATOR_GE EXP
   61    | EXP . OPERATOR_EQ EXP
   62    | EXP . OPERATOR_NE EXP
   63    | EXP . OPERATOR_AND EXP
   64    | EXP . OPERATOR_OR EXP
   65    | '(' EXP . ')'

    OPERATOR_LE   shift, and go to state 87
    OPERATOR_GE   shift, and go to state 88
    OPERATOR_EQ   shift, and go to state 89
    OPERATOR_NE   shift, and go to state 90
    OPERATOR_AND  shift, and go to state 91
    OPERATOR_OR   shift, and go to state 92
    '<'           shift, and go to state 93
    '>'           shift, and go to state 94
    '+'           shift, and go to state 95
    '-'           shift, and go to state 96
    '*'           shift, and go to state 97
    '/'           shift, and go to state 98
    ')'           shift, and go to state 110


state 86

   50 EXP: '&' TK_IDENTIFIER .

    $default  reduce using rule 50 (EXP)


state 87

   59 EXP: EXP OPERATOR_LE . EXP

    TK_IDENTIFIER  shift, and go to state 65
    LIT_INTEGER    shift, and go to state 21
    LIT_FALSE      shift, and go to state 22
    LIT_TRUE       shift, and go to state 23
    LIT_CHAR       shift, and go to state 24
    LIT_STRING     shift, and go to state 25
    '*'            shift, and go to state 66
    '('            shift, and go to state 67
    '&'            shift, and go to state 68

    LIT  go to state 69
    EXP  go to state 111
    FUN  go to state 71


state 88

   60 EXP: EXP OPERATOR_GE . EXP

    TK_IDENTIFIER  shift, and go to state 65
    LIT_INTEGER    shift, and go to state 21
    LIT_FALSE      shift, and go to state 22
    LIT_TRUE       shift, and go to state 23
    LIT_CHAR       shift, and go to state 24
    LIT_STRING     shift, and go to state 25
    '*'            shift, and go to state 66
    '('            shift, and go to state 67
    '&'            shift, and go to state 68

    LIT  go to state 69
    EXP  go to state 112
    FUN  go to state 71


state 89

   61 EXP: EXP OPERATOR_EQ . EXP

    TK_IDENTIFIER  shift, and go to state 65
    LIT_INTEGER    shift, and go to state 21
    LIT_FALSE      shift, and go to state 22
    LIT_TRUE       shift, and go to state 23
    LIT_CHAR       shift, and go to state 24
    LIT_STRING     shift, and go to state 25
    '*'            shift, and go to state 66
    '('            shift, and go to state 67
    '&'            shift, and go to state 68

    LIT  go to state 69
    EXP  go to state 113
    FUN  go to state 71


state 90

   62 EXP: EXP OPERATOR_NE . EXP

    TK_IDENTIFIER  shift, and go to state 65
    LIT_INTEGER    shift, and go to state 21
    LIT_FALSE      shift, and go to state 22
    LIT_TRUE       shift, and go to state 23
    LIT_CHAR       shift, and go to state 24
    LIT_STRING     shift, and go to state 25
    '*'            shift, and go to state 66
    '('            shift, and go to state 67
    '&'            shift, and go to state 68

    LIT  go to state 69
    EXP  go to state 114
    FUN  go to state 71


state 91

   63 EXP: EXP OPERATOR_AND . EXP

    TK_IDENTIFIER  shift, and go to state 65
    LIT_INTEGER    shift, and go to state 21
    LIT_FALSE      shift, and go to state 22
    LIT_TRUE       shift, and go to state 23
    LIT_CHAR       shift, and go to state 24
    LIT_STRING     shift, and go to state 25
    '*'            shift, and go to state 66
    '('            shift, and go to state 67
    '&'            shift, and go to state 68

    LIT  go to state 69
    EXP  go to state 115
    FUN  go to state 71


state 92

   64 EXP: EXP OPERATOR_OR . EXP

    TK_IDENTIFIER  shift, and go to state 65
    LIT_INTEGER    shift, and go to state 21
    LIT_FALSE      shift, and go to state 22
    LIT_TRUE       shift, and go to state 23
    LIT_CHAR       shift, and go to state 24
    LIT_STRING     shift, and go to state 25
    '*'            shift, and go to state 66
    '('            shift, and go to state 67
    '&'            shift, and go to state 68

    LIT  go to state 69
    EXP  go to state 116
    FUN  go to state 71


state 93

   57 EXP: EXP '<' . EXP

    TK_IDENTIFIER  shift, and go to state 65
    LIT_INTEGER    shift, and go to state 21
    LIT_FALSE      shift, and go to state 22
    LIT_TRUE       shift, and go to state 23
    LIT_CHAR       shift, and go to state 24
    LIT_STRING     shift, and go to state 25
    '*'            shift, and go to state 66
    '('            shift, and go to state 67
    '&'            shift, and go to state 68

    LIT  go to state 69
    EXP  go to state 117
    FUN  go to state 71


state 94

   58 EXP: EXP '>' . EXP

    TK_IDENTIFIER  shift, and go to state 65
    LIT_INTEGER    shift, and go to state 21
    LIT_FALSE      shift, and go to state 22
    LIT_TRUE       shift, and go to state 23
    LIT_CHAR       shift, and go to state 24
    LIT_STRING     shift, and go to state 25
    '*'            shift, and go to state 66
    '('            shift, and go to state 67
    '&'            shift, and go to state 68

    LIT  go to state 69
    EXP  go to state 118
    FUN  go to state 71


state 95

   55 EXP: EXP '+' . EXP

    TK_IDENTIFIER  shift, and go to state 65
    LIT_INTEGER    shift, and go to state 21
    LIT_FALSE      shift, and go to state 22
    LIT_TRUE       shift, and go to state 23
    LIT_CHAR       shift, and go to state 24
    LIT_STRING     shift, and go to state 25
    '*'            shift, and go to state 66
    '('            shift, and go to state 67
    '&'            shift, and go to state 68

    LIT  go to state 69
    EXP  go to state 119
    FUN  go to state 71


state 96

   56 EXP: EXP '-' . EXP

    TK_IDENTIFIER  shift, and go to state 65
    LIT_INTEGER    shift, and go to state 21
    LIT_FALSE      shift, and go to state 22
    LIT_TRUE       shift, and go to state 23
    LIT_CHAR       shift, and go to state 24
    LIT_STRING     shift, and go to state 25
    '*'            shift, and go to state 66
    '('            shift, and go to state 67
    '&'            shift, and go to state 68

    LIT  go to state 69
    EXP  go to state 120
    FUN  go to state 71


state 97

   53 EXP: EXP '*' . EXP

    TK_IDENTIFIER  shift, and go to state 65
    LIT_INTEGER    shift, and go to state 21
    LIT_FALSE      shift, and go to state 22
    LIT_TRUE       shift, and go to state 23
    LIT_CHAR       shift, and go to state 24
    LIT_STRING     shift, and go to state 25
    '*'            shift, and go to state 66
    '('            shift, and go to state 67
    '&'            shift, and go to state 68

    LIT  go to state 69
    EXP  go to state 121
    FUN  go to state 71


state 98

   54 EXP: EXP '/' . EXP

    TK_IDENTIFIER  shift, and go to state 65
    LIT_INTEGER    shift, and go to state 21
    LIT_FALSE      shift, and go to state 22
    LIT_TRUE       shift, and go to state 23
    LIT_CHAR       shift, and go to state 24
    LIT_STRING     shift, and go to state 25
    '*'            shift, and go to state 66
    '('            shift, and go to state 67
    '&'            shift, and go to state 68

    LIT  go to state 69
    EXP  go to state 122
    FUN  go to state 71


state 99

   69 LIST_PARAM: EXP ',' . LIST_PARAM

    TK_IDENTIFIER  shift, and go to state 65
    LIT_INTEGER    shift, and go to state 21
    LIT_FALSE      shift, and go to state 22
    LIT_TRUE       shift, and go to state 23
    LIT_CHAR       shift, and go to state 24
    LIT_STRING     shift, and go to state 25
    '*'            shift, and go to state 66
    '('            shift, and go to state 67
    '&'            shift, and go to state 68

    LIT         go to state 69
    EXP         go to state 73
    FUN         go to state 71
    LIST_PARAM  go to state 123


state 100

   40 COMMAND: TK_IDENTIFIER '(' ')' .

    $default  reduce using rule 40 (COMMAND)


state 101

   39 COMMAND: TK_IDENTIFIER '(' LIST_PARAM . ')'

    ')'  shift, and go to state 124


state 102

   34 COMMAND: TK_IDENTIFIER '=' EXP .
   53 EXP: EXP . '*' EXP
   54    | EXP . '/' EXP
   55    | EXP . '+' EXP
   56    | EXP . '-' EXP
   57    | EXP . '<' EXP
   58    | EXP . '>' EXP
   59    | EXP . OPERATOR_LE EXP
   60    | EXP . OPERATOR_GE EXP
   61    | EXP . OPERATOR_EQ EXP
   62    | EXP . OPERATOR_NE EXP
   63    | EXP . OPERATOR_AND EXP
   64    | EXP . OPERATOR_OR EXP

    OPERATOR_LE   shift, and go to state 87
    OPERATOR_GE   shift, and go to state 88
    OPERATOR_EQ   shift, and go to state 89
    OPERATOR_NE   shift, and go to state 90
    OPERATOR_AND  shift, and go to state 91
    OPERATOR_OR   shift, and go to state 92
    '<'           shift, and go to state 93
    '>'           shift, and go to state 94
    '+'           shift, and go to state 95
    '-'           shift, and go to state 96
    '*'           shift, and go to state 97
    '/'           shift, and go to state 98

    $default  reduce using rule 34 (COMMAND)


state 103

   43 LIST_COM: COMMAND ';' . LIST_COM
   44         | COMMAND ';' .

    KW_IF          shift, and go to state 48
    KW_LOOP        shift, and go to state 49
    KW_INPUT       shift, and go to state 50
    KW_RETURN      shift, and go to state 51
    KW_OUTPUT      shift, and go to state 52
    TK_IDENTIFIER  shift, and go to state 53
    '{'            shift, and go to state 54

    '}'       reduce using rule 44 (LIST_COM)
    '}'       [reduce using rule 45 (LIST_COM)]
    $default  reduce using rule 41 (COMMAND)

    COMMAND   go to state 77
    BLOCO     go to state 56
    LIST_COM  go to state 125
    IF        go to state 57
    LOOP      go to state 58


state 104

   42 BLOCO: '{' LIST_COM '}' .

    $default  reduce using rule 42 (BLOCO)


state 105

   10 DEC_LOC_VAR: TYPE '$' TK_IDENTIFIER ':' LIT .

    $default  reduce using rule 10 (DEC_LOC_VAR)


state 106

   46 IF: KW_IF '(' EXP ')' . KW_THEN COMMAND
   47   | KW_IF '(' EXP ')' . KW_THEN COMMAND KW_ELSE COMMAND

    KW_THEN  shift, and go to state 126


state 107

   48 LOOP: KW_LOOP '(' EXP ')' . COMMAND

    KW_IF          shift, and go to state 48
    KW_LOOP        shift, and go to state 49
    KW_INPUT       shift, and go to state 50
    KW_RETURN      shift, and go to state 51
    KW_OUTPUT      shift, and go to state 52
    TK_IDENTIFIER  shift, and go to state 53
    '{'            shift, and go to state 54

    $default  reduce using rule 41 (COMMAND)

    COMMAND  go to state 127
    BLOCO    go to state 56
    IF       go to state 57
    LOOP     go to state 58


state 108

   68 FUN: TK_IDENTIFIER '(' ')' .

    $default  reduce using rule 68 (FUN)


state 109

   67 FUN: TK_IDENTIFIER '(' LIST_PARAM . ')'

    ')'  shift, and go to state 128


state 110

   65 EXP: '(' EXP ')' .

    $default  reduce using rule 65 (EXP)


state 111

   53 EXP: EXP . '*' EXP
   54    | EXP . '/' EXP
   55    | EXP . '+' EXP
   56    | EXP . '-' EXP
   57    | EXP . '<' EXP
   58    | EXP . '>' EXP
   59    | EXP . OPERATOR_LE EXP
   59    | EXP OPERATOR_LE EXP .
   60    | EXP . OPERATOR_GE EXP
   61    | EXP . OPERATOR_EQ EXP
   62    | EXP . OPERATOR_NE EXP
   63    | EXP . OPERATOR_AND EXP
   64    | EXP . OPERATOR_OR EXP

    '+'  shift, and go to state 95
    '-'  shift, and go to state 96
    '*'  shift, and go to state 97
    '/'  shift, and go to state 98

    $default  reduce using rule 59 (EXP)


state 112

   53 EXP: EXP . '*' EXP
   54    | EXP . '/' EXP
   55    | EXP . '+' EXP
   56    | EXP . '-' EXP
   57    | EXP . '<' EXP
   58    | EXP . '>' EXP
   59    | EXP . OPERATOR_LE EXP
   60    | EXP . OPERATOR_GE EXP
   60    | EXP OPERATOR_GE EXP .
   61    | EXP . OPERATOR_EQ EXP
   62    | EXP . OPERATOR_NE EXP
   63    | EXP . OPERATOR_AND EXP
   64    | EXP . OPERATOR_OR EXP

    '+'  shift, and go to state 95
    '-'  shift, and go to state 96
    '*'  shift, and go to state 97
    '/'  shift, and go to state 98

    $default  reduce using rule 60 (EXP)


state 113

   53 EXP: EXP . '*' EXP
   54    | EXP . '/' EXP
   55    | EXP . '+' EXP
   56    | EXP . '-' EXP
   57    | EXP . '<' EXP
   58    | EXP . '>' EXP
   59    | EXP . OPERATOR_LE EXP
   60    | EXP . OPERATOR_GE EXP
   61    | EXP . OPERATOR_EQ EXP
   61    | EXP OPERATOR_EQ EXP .
   62    | EXP . OPERATOR_NE EXP
   63    | EXP . OPERATOR_AND EXP
   64    | EXP . OPERATOR_OR EXP

    '+'  shift, and go to state 95
    '-'  shift, and go to state 96
    '*'  shift, and go to state 97
    '/'  shift, and go to state 98

    $default  reduce using rule 61 (EXP)


state 114

   53 EXP: EXP . '*' EXP
   54    | EXP . '/' EXP
   55    | EXP . '+' EXP
   56    | EXP . '-' EXP
   57    | EXP . '<' EXP
   58    | EXP . '>' EXP
   59    | EXP . OPERATOR_LE EXP
   60    | EXP . OPERATOR_GE EXP
   61    | EXP . OPERATOR_EQ EXP
   62    | EXP . OPERATOR_NE EXP
   62    | EXP OPERATOR_NE EXP .
   63    | EXP . OPERATOR_AND EXP
   64    | EXP . OPERATOR_OR EXP

    '+'  shift, and go to state 95
    '-'  shift, and go to state 96
    '*'  shift, and go to state 97
    '/'  shift, and go to state 98

    $default  reduce using rule 62 (EXP)


state 115

   53 EXP: EXP . '*' EXP
   54    | EXP . '/' EXP
   55    | EXP . '+' EXP
   56    | EXP . '-' EXP
   57    | EXP . '<' EXP
   58    | EXP . '>' EXP
   59    | EXP . OPERATOR_LE EXP
   60    | EXP . OPERATOR_GE EXP
   61    | EXP . OPERATOR_EQ EXP
   62    | EXP . OPERATOR_NE EXP
   63    | EXP . OPERATOR_AND EXP
   63    | EXP OPERATOR_AND EXP .
   64    | EXP . OPERATOR_OR EXP

    OPERATOR_LE  shift, and go to state 87
    OPERATOR_GE  shift, and go to state 88
    OPERATOR_EQ  shift, and go to state 89
    OPERATOR_NE  shift, and go to state 90
    '<'          shift, and go to state 93
    '>'          shift, and go to state 94
    '+'          shift, and go to state 95
    '-'          shift, and go to state 96
    '*'          shift, and go to state 97
    '/'          shift, and go to state 98

    $default  reduce using rule 63 (EXP)


state 116

   53 EXP: EXP . '*' EXP
   54    | EXP . '/' EXP
   55    | EXP . '+' EXP
   56    | EXP . '-' EXP
   57    | EXP . '<' EXP
   58    | EXP . '>' EXP
   59    | EXP . OPERATOR_LE EXP
   60    | EXP . OPERATOR_GE EXP
   61    | EXP . OPERATOR_EQ EXP
   62    | EXP . OPERATOR_NE EXP
   63    | EXP . OPERATOR_AND EXP
   64    | EXP . OPERATOR_OR EXP
   64    | EXP OPERATOR_OR EXP .

    OPERATOR_LE  shift, and go to state 87
    OPERATOR_GE  shift, and go to state 88
    OPERATOR_EQ  shift, and go to state 89
    OPERATOR_NE  shift, and go to state 90
    '<'          shift, and go to state 93
    '>'          shift, and go to state 94
    '+'          shift, and go to state 95
    '-'          shift, and go to state 96
    '*'          shift, and go to state 97
    '/'          shift, and go to state 98

    $default  reduce using rule 64 (EXP)


state 117

   53 EXP: EXP . '*' EXP
   54    | EXP . '/' EXP
   55    | EXP . '+' EXP
   56    | EXP . '-' EXP
   57    | EXP . '<' EXP
   57    | EXP '<' EXP .
   58    | EXP . '>' EXP
   59    | EXP . OPERATOR_LE EXP
   60    | EXP . OPERATOR_GE EXP
   61    | EXP . OPERATOR_EQ EXP
   62    | EXP . OPERATOR_NE EXP
   63    | EXP . OPERATOR_AND EXP
   64    | EXP . OPERATOR_OR EXP

    '+'  shift, and go to state 95
    '-'  shift, and go to state 96
    '*'  shift, and go to state 97
    '/'  shift, and go to state 98

    $default  reduce using rule 57 (EXP)


state 118

   53 EXP: EXP . '*' EXP
   54    | EXP . '/' EXP
   55    | EXP . '+' EXP
   56    | EXP . '-' EXP
   57    | EXP . '<' EXP
   58    | EXP . '>' EXP
   58    | EXP '>' EXP .
   59    | EXP . OPERATOR_LE EXP
   60    | EXP . OPERATOR_GE EXP
   61    | EXP . OPERATOR_EQ EXP
   62    | EXP . OPERATOR_NE EXP
   63    | EXP . OPERATOR_AND EXP
   64    | EXP . OPERATOR_OR EXP

    '+'  shift, and go to state 95
    '-'  shift, and go to state 96
    '*'  shift, and go to state 97
    '/'  shift, and go to state 98

    $default  reduce using rule 58 (EXP)


state 119

   53 EXP: EXP . '*' EXP
   54    | EXP . '/' EXP
   55    | EXP . '+' EXP
   55    | EXP '+' EXP .
   56    | EXP . '-' EXP
   57    | EXP . '<' EXP
   58    | EXP . '>' EXP
   59    | EXP . OPERATOR_LE EXP
   60    | EXP . OPERATOR_GE EXP
   61    | EXP . OPERATOR_EQ EXP
   62    | EXP . OPERATOR_NE EXP
   63    | EXP . OPERATOR_AND EXP
   64    | EXP . OPERATOR_OR EXP

    '*'  shift, and go to state 97
    '/'  shift, and go to state 98

    $default  reduce using rule 55 (EXP)


state 120

   53 EXP: EXP . '*' EXP
   54    | EXP . '/' EXP
   55    | EXP . '+' EXP
   56    | EXP . '-' EXP
   56    | EXP '-' EXP .
   57    | EXP . '<' EXP
   58    | EXP . '>' EXP
   59    | EXP . OPERATOR_LE EXP
   60    | EXP . OPERATOR_GE EXP
   61    | EXP . OPERATOR_EQ EXP
   62    | EXP . OPERATOR_NE EXP
   63    | EXP . OPERATOR_AND EXP
   64    | EXP . OPERATOR_OR EXP

    '*'  shift, and go to state 97
    '/'  shift, and go to state 98

    $default  reduce using rule 56 (EXP)


state 121

   53 EXP: EXP . '*' EXP
   53    | EXP '*' EXP .
   54    | EXP . '/' EXP
   55    | EXP . '+' EXP
   56    | EXP . '-' EXP
   57    | EXP . '<' EXP
   58    | EXP . '>' EXP
   59    | EXP . OPERATOR_LE EXP
   60    | EXP . OPERATOR_GE EXP
   61    | EXP . OPERATOR_EQ EXP
   62    | EXP . OPERATOR_NE EXP
   63    | EXP . OPERATOR_AND EXP
   64    | EXP . OPERATOR_OR EXP

    $default  reduce using rule 53 (EXP)


state 122

   53 EXP: EXP . '*' EXP
   54    | EXP . '/' EXP
   54    | EXP '/' EXP .
   55    | EXP . '+' EXP
   56    | EXP . '-' EXP
   57    | EXP . '<' EXP
   58    | EXP . '>' EXP
   59    | EXP . OPERATOR_LE EXP
   60    | EXP . OPERATOR_GE EXP
   61    | EXP . OPERATOR_EQ EXP
   62    | EXP . OPERATOR_NE EXP
   63    | EXP . OPERATOR_AND EXP
   64    | EXP . OPERATOR_OR EXP

    $default  reduce using rule 54 (EXP)


state 123

   69 LIST_PARAM: EXP ',' LIST_PARAM .

    $default  reduce using rule 69 (LIST_PARAM)


state 124

   39 COMMAND: TK_IDENTIFIER '(' LIST_PARAM ')' .

    $default  reduce using rule 39 (COMMAND)


state 125

   43 LIST_COM: COMMAND ';' LIST_COM .

    $default  reduce using rule 43 (LIST_COM)


state 126

   46 IF: KW_IF '(' EXP ')' KW_THEN . COMMAND
   47   | KW_IF '(' EXP ')' KW_THEN . COMMAND KW_ELSE COMMAND

    KW_IF          shift, and go to state 48
    KW_LOOP        shift, and go to state 49
    KW_INPUT       shift, and go to state 50
    KW_RETURN      shift, and go to state 51
    KW_OUTPUT      shift, and go to state 52
    TK_IDENTIFIER  shift, and go to state 53
    '{'            shift, and go to state 54

    $default  reduce using rule 41 (COMMAND)

    COMMAND  go to state 129
    BLOCO    go to state 56
    IF       go to state 57
    LOOP     go to state 58


state 127

   48 LOOP: KW_LOOP '(' EXP ')' COMMAND .

    $default  reduce using rule 48 (LOOP)


state 128

   67 FUN: TK_IDENTIFIER '(' LIST_PARAM ')' .

    $default  reduce using rule 67 (FUN)


state 129

   46 IF: KW_IF '(' EXP ')' KW_THEN COMMAND .
   47   | KW_IF '(' EXP ')' KW_THEN COMMAND . KW_ELSE COMMAND

    KW_ELSE  shift, and go to state 130

    KW_ELSE   [reduce using rule 46 (IF)]
    $default  reduce using rule 46 (IF)


state 130

   47 IF: KW_IF '(' EXP ')' KW_THEN COMMAND KW_ELSE . COMMAND

    KW_IF          shift, and go to state 48
    KW_LOOP        shift, and go to state 49
    KW_INPUT       shift, and go to state 50
    KW_RETURN      shift, and go to state 51
    KW_OUTPUT      shift, and go to state 52
    TK_IDENTIFIER  shift, and go to state 53
    '{'            shift, and go to state 54

    $default  reduce using rule 41 (COMMAND)

    COMMAND  go to state 131
    BLOCO    go to state 56
    IF       go to state 57
    LOOP     go to state 58


state 131

   47 IF: KW_IF '(' EXP ')' KW_THEN COMMAND KW_ELSE COMMAND .

    $default  reduce using rule 47 (IF)
