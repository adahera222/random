require 'spec.love-mocks'

local anim8        = require 'anim8'
local newAnimation = anim8.newAnimation

describe("anim8", function()
  describe("newAnimation", function()

    it("Throws an error if the mode is not one of the 3 valid ones", function()
      assert.error(    function() newAnimation("foo",    {}, 1) end)
      assert.not_error(function() newAnimation("loop",   {}, 1) end)
      assert.not_error(function() newAnimation("once",   {}, 1) end)
      assert.not_error(function() newAnimation("bounce", {}, 1) end)
    end)
    it("Throws an error if defaultDelay is not a positive number", function()
      assert.error(function() newAnimation("loop", {}, 'foo') end)
      assert.error(function() newAnimation("loop", {}, -1)    end)
      assert.error(function() newAnimation("loop", {}, 0)     end)
    end)
    it("Throws an error if delays is not a table or nil", function()
      assert.error(function() newAnimation("loop", {}, 1, "") end)
      assert.error(function() newAnimation("loop", {}, 1, 5)  end)
    end)

    it("sets the basic stuff", function()
      local a = newAnimation("loop", {1,2,3}, 4)
      assert.equal("loop",    a.mode)
      assert.equal(0,         a.timer)
      assert.equal(1,         a.position)
      assert.equal(1,         a.direction)
      assert.equal("playing", a.status)
      assert.same({1,2,3}, a.frames)
      assert.same({4,4,4}, a.delays)
    end)
    it("makes a clone of the frame table", function()
      local frames = {1,2,3}
      local a = newAnimation("loop", frames, 4)
      assert.same(frames, a.frames)
      assert.not_equal (frames, a.frames)
    end)

    describe("when parsing the delays", function()
      it("reads a simple array", function()
        local a = newAnimation("loop", {1,2,3,4}, 4, {5,6,7,8})
        assert.same({5,6,7,8}, a.delays)
      end)
      it("reads a hash of numbers, padding the rest with the default", function()
        local a = newAnimation("loop", {1,2,3,4}, 4, {[2]=3, [4]=3})
        assert.same({4,3,4,3}, a.delays)
      end)
      it("reads a hash with strings, padding the rest with the default", function()
        local a = newAnimation("loop", {1,2,3,4}, 4, {['1-3']=1})
        assert.same({1,1,1,4}, a.delays)
      end)
      it("reads mixed-up delays", function()
        local a = newAnimation("loop", {1,2,3,4}, 4, {5, ['2-3']=2})
        assert.same({5,2,2,4}, a.delays)
      end)
      describe("when given erroneous imput", function()
        it("throws errors for keys that are not integers or strings", function()
          assert.error(function() newAnimation("loop", {1}, 4, {[{}]=1}) end)
          assert.error(function() newAnimation("loop", {1}, 4, {[print]=1}) end)
        end)
        it("throws errors for integers with no frames", function()
          assert.error(function() newAnimation("loop", {1,2}, 4, {[3]=1}) end)
        end)
        it("throws errors for strings representing delays with no frames", function()
          assert.error(function() newAnimation("loop", {1,2}, 4, {["3-5"]=1}) end)
        end)
        it("throws errors for bogus strings", function()
          assert.error(function() newAnimation("loop", {1,2}, 4, {["foo"]=1}) end)
        end)
      end)
    end)
  end)

  describe("Animation", function()
    describe(":update", function()
      it("moves to the next frame", function()
        local a = newAnimation("loop", {1,2,3,4}, 1)
        a:update(1)
        assert.equal(1, a.position)
        a:update(0.1)
        assert.equal(2, a.position)
      end)
      it("moves several frames if needed", function()
        local a = newAnimation("loop", {1,2,3,4}, 1)
        a:update(2.1)
        assert.equal(3, a.position)
      end)

      describe("When the last frame is spent", function()
        it("goes back to the first frame in 'loop' animations", function()
          local a = newAnimation("loop", {1,2,3,4}, 1)
          a:update(4.1)
          assert.equal(1, a.position)
        end)
        it("stays there in 'once' animations", function()
          local a = newAnimation("once", {1,2,3,4}, 1)
          a:update(4.1)
          assert.equal(4, a.position)
        end)
        it("changes the status to 'finished' in 'once' animations", function()
          local a = newAnimation("once", {1,2,3,4}, 1)
          a:update(4.1)
          assert.equal("finished", a.status)
        end)
        it("bounces in 'bounce' animations", function()
          local a = newAnimation("bounce", {1,2,3}, 1)
          a:update(3.1)
          assert.equal(2, a.position)
          a:update(1)
          assert.equal(1, a.position)
          a:update(1)
          assert.equal(2, a.position)
          a:update(1)
          assert.equal(3, a.position)
        end)
      end)

      describe("When there are different delays per frame", function()
        it("moves the frame correctly", function()
          local a = newAnimation("loop", {1,2,3,4}, 1, {[2]=2})
          a:update(1.1)
          assert.equal(2, a.position)
          a:update(1.1)
          assert.equal(2, a.position)
          a:update(1.1)
          assert.equal(3, a.position)
        end)
      end)
    end)

    describe(":pause", function()
      it("stops animations from happening", function()
        local a = newAnimation("loop", {1,2,3,4}, 1)
        a:update(1.1)
        a:pause()
        a:update(1)
        assert.equal(2, a.position)
      end)
    end)

    describe(":resume", function()
      it("reanudates paused animations", function()
        local a = newAnimation("loop", {1,2,3,4}, 1)
        a:update(1.1)
        a:pause()
        a:resume()
        a:update(1)
        assert.equal(3, a.position)
      end)
    end)

    describe(":gotoFrame", function()
      it("moves the position to the frame specified", function()
        local a = newAnimation("loop", {1,2,3,4}, 1)
        a:update(1.1)
        a:gotoFrame(1)
        assert.equal(1, a.position)
      end)
    end)

    describe(":draw", function()
      it("invokes love.graphics.drawq with the expected parameters", function()
        spy.on(love.graphics, 'drawq')
        local img, frame1, frame2, frame3 = {},{},{},{}
        local a   = newAnimation("loop", {frame1, frame2, frame3}, 1)
        a:draw(img, 10, 20, 0, 1,2,3,4)
        assert.spy(love.graphics.drawq).was.called_with(img, frame1, 10, 20, 0, 1,2,3,4)
      end)
    end)

    describe(":clone", function()
      it("returns a new animation with the same properties - but reset to the initial frame", function()
        local frames = {1,2,3,4}
        local a = newAnimation("loop", frames, 1)
        a:update(1)
        a:pause()
        local b = a:clone()
        assert.equal("loop", b.mode)
        assert.not_equal(frames, b.frames)
        assert.same(frames, b.frames)
        assert.same(a.delays, b.delays)
        assert.equal(0, b.timer)
        assert.equal(1, b.position)
        assert.equal(1, b.direction)
        assert.equal("playing", b.status )
        assert.False(b.flippedH)
        assert.False(b.flippedV)

        a:flipV()
        assert.True(a:clone().flippedV)

        a:flipH()
        assert.True(a:clone().flippedH)

      end)
    end)

    describe(":flipH and :flipV", function()
      local img, frame, a
      before_each(function()
        spy.on(love.graphics, 'drawq')
        img = {}
        frame = love.graphics.newQuad(1,2,3,4) -- x,y,width, height
        a     = newAnimation("loop", {frame}, 1)
      end)
      it("defaults to non-flipped", function()
        assert.False(a.flippedH)
        assert.False(a.flippedV)
      end)

      it("can be set on creation", function()
        local b = newAnimation("loop", {frame}, 1, {}, false, true)
        assert.False(b.flippedH)
        assert.True(b.flippedV)
      end)

      it("Flips the animation horizontally (does not create a clone)", function()
        a:flipH()
        a:draw(img, 10, 20, 0, 5,6,7,8)
        assert.spy(love.graphics.drawq).was.called_with(img, frame, 10, 20, 0, -5,6,3-7,8)

        a:flipH()
        a:draw(img, 10, 20, 0, 5,6,7,8)
        assert.spy(love.graphics.drawq).was.called_with(img, frame, 10, 20, 0, 5,6,7,8)
      end)

      it("Flips the animation vertically (does not create a clone)", function()
        a:flipV()
        a:draw(img, 10, 20, 0, 5,6,7,8)
        assert.spy(love.graphics.drawq).was.called_with(img, frame, 10, 20, 0, 5,-6,7,4-8)

        a:flipV()
        a:draw(img, 10, 20, 0, 5,6,7,8)
        assert.spy(love.graphics.drawq).was.called_with(img, frame, 10, 20, 0, 5,6,7,8)
      end)
    end)
  end)
end)
